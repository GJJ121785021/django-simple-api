# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['django_simple_api']

package_data = \
{'': ['*'], 'django_simple_api': ['templates/*']}

install_requires = \
['django', 'pydantic>=1.7.3,<2.0.0']

setup_kwargs = {
    'name': 'django-simple-api',
    'version': '0.1.0',
    'description': 'A non-intrusive component that can help you quickly create APIs.',
    'long_description': '# Django Simple API\n\nA non-intrusive component that can help you quickly create APIs.\n\n## Install\n\nDownload and install from github\n\n```\npip install git+https://github.com/abersheeran/django-simple-api.git@setup.py\n```\n\nAdd django-simple-api to your `INSTALLED_APPS` in settings:\n\n```python\nINSTALLED_APPS = [\n    ...\n    "django_simple_api",\n]\n```\n\nAdd `SimpleApiMiddleware` to your `MIDDLEWARE` in settings:\n\n```python\nMIDDLEWARE = [\n    ...\n    "django_simple_api.middleware.SimpleApiMiddleware",\n]\n```\n\n## Usage\nSuppose you want to use the `GET` method and accept an argument, you can do this\n```python\nfrom django_simple_api import Query, allow_request_method\n\n@allow_request_method("get")\ndef get_user(request, user_name: str = Query(...)):\n    return JsonResponse({"name": user_name})\n```\nRegister the view function in urlpatterns\n```python\nurlpatterns = [\n    ...,\n    path("get-user/", get_user),\n]\n```\n\n`@allow_request_method("get")`Declare the request method allowed by the view function.\n\n`user_name: str = Query(...)` Gets a required `String` parameter `user_name` from a `GET` request parameter.\nIf the parameter does not exist,the request will be rejected,it will return status code 422 and state the reason.\n\nOf course you can pass in default parameters,`Query("Bill")`\nLet\'s look at another example:\n```python\nfrom django_simple_api import Body\n\n@csrf_exempt\n@allow_request_method("post")\ndef add(request, first_num: int = Body(1), second_num: int = Body(2)):\n    return JsonResponse({"result": first_num + second_num})\n```\nExecute the command\n```shell script\ncurl -X POST "http://127.0.0.1:8000/add/" -H  "Content-Type: application/json" -d "{\\"first_num\\":3}"\n```\nYou\'ll see response {"result": 5}\n\nIt represents getting two non-required parameters of type `integer` from the parameters of the `POST` request,\nIf the parameter type is `String`,The request will be rejected.\n\nBecause you declared `first_num` to be of type hint `int`,\nWhen the parameters are injected, the conversion is done automatically for you,\nSo `first_num` and `second_num` can be added directly without the need for manual type conversion\n\n\nNow you open the URL [http://127.0.0.1:8000/docs/](http://127.0.0.1:8000/docs/)\n\n![](docs/images/show_swagger_index.png)\n\n> You can see the API documentation online,and you can send mock requests on it\n\n![](docs/images/show_test_get.png)\n\n\nIf you want to use multiple request methods in a view, please use class based view,\nYou can also add description information to the function, which will be displayed in the API documentation\n\n```python\nclass JustTest(View):\n    def get(\n        self,\n        request: HttpRequest,\n        id: int = Path(..., description="This is description of id."),\n    ) -> HttpResponse:\n        """\n        This is summary.\n\n        This is description.\n        """\n        return HttpResponse(id)\n```\nRegister the View in urlpatterns\n```python\nurlpatterns = [\n    ...,\n    path("just-test/<id>", JustTest.as_view()),\n]\n```\nThe path parameters `id` will be passed into the view by field Path,and you\'ll see a lot of descriptions in the API documentation\n\n![](docs/images/show_descriptions.png)\n\n#### All fields that can be injected into a function\n| Field name| Explain|\n| ---       | ---    |\n| Query     | |\n| Body      | |\n| Path      | |\n| Cookie    | |\n| Header    | |\n| Exclusive | |\n\n#### Field argument explain\n| Name           | Explain |\n| ---            | ---     |\n| default        | since this is replacing the fieldâ€™s default, its first argument is used to set the default, use ellipsis (``...``) to indicate the field is required|\n| default_factory| callable that will be called when a default value is needed for this field. If both `default` and `default_factory` are set, an error is raised.|\n| alias          | the public name of the field|\n| title          | can be any string, used in the schema|\n| description    | can be any string, used in the schema|\n| const          | this field is required and *must* take it\'s default value|\n| gt             | only applies to numbers, requires the field to be "greater than". The schema will have an ``exclusiveMinimum`` validation keyword|\n| ge             | only applies to numbers, requires the field to be "greater than or equal to". The schema will have a ``minimum`` validation keyword|\n| lt             | only applies to numbers, requires the field to be "less than". The schema will have an ``exclusiveMaximum`` validation keyword|\n| le             | only applies to numbers, requires the field to be "less than or equal to". The schema will have a ``maximum`` validation keyword|\n| multiple_of    | only applies to numbers, requires the field to be "a multiple of". The schema will have a ``multipleOf`` validation keyword|\n| min_items      | only applies to list or tuple and set, requires the field to have a minimum length.|\n| max_items      | only applies to list or tuple and set, requires the field to have a maximum length.|\n| min_length     | only applies to strings, requires the field to have a minimum length. The schema will have a ``maximum`` validation keyword|\n| max_length     | only applies to strings, requires the field to have a maximum length. The schema will have a ``maxLength`` validation keyword|\n| regex          | only applies to strings, requires the field match again a regular expression pattern string. The schema will have a ``pattern`` validation keyword|\n| extra          | any additional keyword arguments will be added as is to the schema|\n\n',
    'author': 'abersheeran',
    'author_email': 'me@abersheeran.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/abersheeran/django-simple-api',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)

